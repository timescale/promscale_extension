name: release
on:
  pull_request:
    paths:
    - '.github/workflows/release.yaml'
    - 'dist/*'
    - 'tools/*'
  push:
    branches:
    - main
    tags:
    - "*"

jobs:
  package:
    runs-on: ubuntu-latest
    env:
      RUST_VERSION: "1.57.0"
    strategy:
      fail-fast: false
      matrix:
        arch:
        - cpu: x86_64
          platform: amd64
        os:
        - name: linux
          distro: debian
          version: 11
          codename: bullseye
          pkg_type: deb
        - name: linux
          distro: centos
          version: 7
          codename: 7
          pkg_type: rpm
        postgres:
        - version: "12"
        - version: "13"
        - version: "14"

    steps:
    - name: Install PackageCloud
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      run: |
        sudo gem install package_cloud --no-doc

    - uses: actions/checkout@v2

    - name: Gather Metadata
      id: metadata
      run: |
        if [[ "${GITHUB_REF}" =~ 'refs/tags' ]]; then \
          version="$(echo "${GITHUB_REF}" | sed -e 's|refs/tags/||')"; \
          tag="${version}"; \
        else \
          tag="$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')"; \
          version="${tag}-snapshot"; \
        fi;
        echo "::set-output name=version::${version}"
        echo "::set-output name=tag::${tag}"
        echo "::set-output name=filename::promscale_extension-${tag}.pg${{ matrix.postgres.version }}.${{ matrix.os.distro }}${{ matrix.os.version }}.${{ matrix.arch.cpu }}.${{ matrix.os.pkg_type }}"
        echo "::set-output name=outfile::promscale_extension-${version}.pg${{ matrix.postgres.version }}.${{ matrix.os.distro }}${{ matrix.os.version }}.${{ matrix.arch.cpu }}.${{ matrix.os.pkg_type }}"
        echo "::set-output name=image::promscale_extension:${tag}.pg${{ matrix.postgres.version }}.${{ matrix.os.distro }}${{ matrix.os.version }}"

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Package
      uses: docker/build-push-action@v2
      with:
        context: .
        load: true
        platforms: ${{ matrix.os.name }}/${{ matrix.arch.platform }}
        file: dist/${{ matrix.os.pkg_type }}.dockerfile
        target: packager
        build-args: |
          OS_NAME=${{ matrix.os.distro }}
          OS_VERSION=${{ matrix.os.version }}
          PG_VERSION=${{ matrix.postgres.version }}
          RUST_VERSION=${{ env.RUST_VERSION }}
          RELEASE_FILE_NAME=${{ steps.metadata.outputs.filename }}
        tags: ${{ steps.metadata.outputs.image }}

    - name: Extract Package
      env:
        PLATFORM: ${{ matrix.os.name }}/${{ matrix.arch.platform }}
      run: |
        mkdir -p artifacts
        container="$(docker create --platform "${PLATFORM}" "${{ steps.metadata.outputs.image }}")"
        docker cp ${container}:/dist/${{ steps.metadata.outputs.filename }} artifacts/${{ steps.metadata.outputs.outfile }}
        docker rm -f "${container}"
        ls -la artifacts/*

    - name: Build Package Tester
      uses: docker/build-push-action@v2
      with:
        context: .
        load: true
        platforms: ${{ matrix.os.name }}/${{ matrix.arch.platform }}
        file: dist/${{ matrix.os.pkg_type }}.dockerfile
        target: tester
        build-args: |
          OS_NAME=${{ matrix.os.distro }}
          OS_VERSION=${{ matrix.os.version }}
          PG_VERSION=${{ matrix.postgres.version }}
          RUST_VERSION=${{ env.RUST_VERSION }}
          RELEASE_FILE_NAME=${{ steps.metadata.outputs.filename }}
        tags: ${{ steps.metadata.outputs.image }}-test

    - name: Test Package
      env:
        PROMSCALE_VERSION: "0.8.0"
        SERVER_NAME: pg${{ matrix.postgres.version }}-${{ matrix.os.distro }}${{ matrix.os.version }}
      run: |
        set -e
        docker run --rm --name "${SERVER_NAME}" -e POSTGRES_PASSWORD=postgres --platform "${PLATFORM}" -dt "${{ steps.metadata.outputs.image }}-test";
        docker run --rm --link "${SERVER_NAME}" --platform "${PLATFORM}" -t timescale/promscale:${PROMSCALE_VERSION} -db.uri "postgres://postgres:postgres@${SERVER_NAME}:5432/postgres?sslmode=disable" -startup.only;
        docker rm -f "${SERVER_NAME}"

    - name: Upload Artifact for Job
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.metadata.outputs.outfile }}
        path: artifacts/${{ steps.metadata.outputs.outfile }}
        retention-days: 1

    - name: Upload Artifact to PackageCloud
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      env:
        PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      run: |
        package_cloud push timescale/timescaledb/${{ matrix.os.distro }}/${{ matrix.os.codename }} artifacts/${{ steps.metadata.outputs.outfile }}

    outputs:
      tag: ${{ steps.metadata.outputs.tag }}
      version: ${{ steps.metadata.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
    - uses: actions/checkout@v2

    - name: Download Packages
      id: download
      uses: actions/download-artifact@v2
      with:
        path: packages

    - name: Stage Packages
      run: |
        mkdir artifacts && find ./packages -type f -regextype posix-extended -regex '.*.(deb|rpm)' -exec mv {} ./artifacts/ \;

    - name: List Release Contents
      if: ${{ !startsWith(github.ref, 'refs/tags') }}
      run: |
        ls -la artifacts/*

    - name: Generate Release Notes
      run: |
        tools/changelog '${{ needs.package.outputs.tag }}' > dist/RELEASE_NOTES.md
        cat dist/RELEASE_NOTES.md

    - name: Create Release
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create -R timescale/promscale_extension --target ${GITHUB_SHA} --notes-file dist/RELEASE_NOTES.md ${{ needs.package.outputs.version }} artifacts/*
