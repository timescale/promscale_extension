name: release
on:
  pull_request:
    paths:
    - '.github/workflows/release.yaml'
    - 'dist/**'
    - 'tools/**'
  push:
    branches:
    - master
    tags:
    - "*"
  schedule:
    - cron: '0 4 * * 1-5' # Monday-Friday @ 4AM

jobs:
  package:
    runs-on: ubuntu-latest
    env:
      RUST_VERSION: "1.64.0"
    strategy:
      fail-fast: false
      matrix:
        arch:
        - cpu: x86_64
          platform: amd64
        os:
        - name: linux
          distro: debian
          version: buster # LTS EOL 2024-06-30 (https://wiki.debian.org/LTS)
          pkg_type: deb
        - name: linux
          distro: debian
          version: bullseye # LTS EOL ~2026-06 (https://wiki.debian.org/LTS)
          pkg_type: deb
        - name: linux
          distro: ubuntu
          version: bionic # End of support 2023-04 (https://wiki.ubuntu.com/Releases)
          pkg_type: deb
        - name: linux
          distro: ubuntu
          version: focal # End of support 2025-04 (https://wiki.ubuntu.com/Releases)
          pkg_type: deb
        - name: linux
          distro: ubuntu
          version: jammy # End of support 2027-04 (https://wiki.ubuntu.com/Releases)
          pkg_type: deb
        # Kinetic is not currently supported by TimescaleDB
        # - name: linux
        #   distro: ubuntu
        #   version: kinetic # End of support 2023-07 (https://wiki.ubuntu.com/Releases)
        #   pkg_type: deb
        - name: linux
          distro: centos
          version: 7 # EOL 2024-06-30 (https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux#Product_life_cycle)
          pkg_type: rpm
          pkg_cloud_distro: el
        - name: linux
          distro: rocky
          docker_distro: rockylinux
          version: 8 # EOL 2029 (https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux#Product_life_cycle)
          pkg_type: rpm
          pkg_cloud_distro: el
        - name: linux
          distro: rocky
          docker_distro: rockylinux
          version: 9 # EOL 2032 (https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux#Product_life_cycle)
          pkg_type: rpm
          pkg_cloud_distro: el
        postgres:
        - version: "12"
        - version: "13"
        - version: "14"

    steps:
    - name: Install PackageCloud
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      run: |
        sudo gem install package_cloud --no-doc

    - uses: actions/checkout@v3

    - name: Gather Metadata
      id: metadata
      run: |
        if [[ "${GITHUB_REF}" =~ 'refs/tags' ]]; then \
          version="$(echo "${GITHUB_REF}" | sed -e 's|refs/tags/||')"; \
          tag="${version}"; \
        else \
          tag="$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "promscale") | .version')"; \
          version="${tag}-snapshot"; \
        fi;
        # a dash indicates a pre-release version in semver
        if [[ "$version" =~ '-' ]]; then \
          repo='timescale/timescaledb-exp'; \
          ghopts='--prerelease --draft'; \
        else \
          repo='timescale/timescaledb'; \
          ghopts='--draft'; \
        fi;
        echo "version=${version}" >> ${GITHUB_OUTPUT}
        echo "tag=${tag}" >> ${GITHUB_OUTPUT}
        echo "filename=promscale-extension-${tag}.pg${{ matrix.postgres.version }}.${{ matrix.os.distro }}${{ matrix.os.version }}.${{ matrix.arch.cpu }}.${{ matrix.os.pkg_type }}" >> ${GITHUB_OUTPUT}
        echo "outfile=promscale-extension-${version}.pg${{ matrix.postgres.version }}.${{ matrix.os.distro }}${{ matrix.os.version }}.${{ matrix.arch.cpu }}.${{ matrix.os.pkg_type }}" >> ${GITHUB_OUTPUT}
        echo "repo=${repo}" >> ${GITHUB_OUTPUT}
        echo "ghopts=${ghopts}" >> ${GITHUB_OUTPUT}
        echo "image=promscale-extension:${tag}.pg${{ matrix.postgres.version }}.${{ matrix.os.distro }}${{ matrix.os.version }}" >> ${GITHUB_OUTPUT}

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v2

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Package
      uses: docker/build-push-action@v3
      with:
        context: .
        load: true
        platforms: ${{ matrix.os.name }}/${{ matrix.arch.platform }}
        file: dist/${{ matrix.os.pkg_type }}.dockerfile
        target: packager
        build-args: |
          OS_NAME=${{ matrix.os.distro }}
          DOCKER_DISTRO_NAME=${{ matrix.os.docker_distro || matrix.os.distro }}
          OS_VERSION=${{ matrix.os.version }}
          PG_VERSION=${{ matrix.postgres.version }}
          RUST_VERSION=${{ env.RUST_VERSION }}
          RELEASE_FILE_NAME=${{ steps.metadata.outputs.filename }}
        secrets: |
          "AWS_ACCESS_KEY_ID=${{ secrets.PROMSCALE_EXTENSION_SCCACHE_AWS_ACCESS_KEY_ID }}"
          "AWS_SECRET_ACCESS_KEY=${{ secrets.PROMSCALE_EXTENSION_SCCACHE_AWS_SECRET_ACCESS_KEY }}"
        tags: ${{ steps.metadata.outputs.image }}

    - name: Extract Package
      env:
        DOCKER_PLATFORM: ${{ matrix.os.name }}/${{ matrix.arch.platform }}
      run: |
        mkdir -p artifacts
        container="$(docker create --platform "${DOCKER_PLATFORM}" "${{ steps.metadata.outputs.image }}")"
        docker cp ${container}:/dist/${{ steps.metadata.outputs.filename }} artifacts/${{ steps.metadata.outputs.outfile }}
        docker rm -f "${container}"
        ls -la artifacts/*

    - name: Test package
      env:
        DISTRO: ${{ matrix.os.distro }}
        DISTRO_VERSION: ${{ matrix.os.version }}
        DOCKER_DISTRO_NAME: ${{ matrix.os.docker_distro || matrix.os.distro }}
        PG_VERSION: ${{ matrix.postgres.version }}
        DOCKER_PLATFORM: ${{ matrix.os.name }}/${{ matrix.arch.platform }}
        PACKAGE_TO_TEST: artifacts/${{ steps.metadata.outputs.outfile }}
        IMAGE_BASE: ${{ steps.metadata.outputs.image }}-test
        DOCKER_FILE: dist/${{ matrix.os.pkg_type }}.test.dockerfile
      run: |
        EXTENSION_DOCKER_IMAGE="${IMAGE_BASE}-${DISTRO}-${DISTRO_VERSION}"; \
        docker buildx build --load --platform=${DOCKER_PLATFORM} \
          --build-arg=DISTRO=${DISTRO} \
          --build-arg=DOCKER_DISTRO_NAME=${DOCKER_DISTRO_NAME} \
          --build-arg=DISTRO_VERSION=${DISTRO_VERSION} \
          --build-arg=PG_VERSION=${PG_VERSION} \
          --build-arg=RELEASE_FILE_NAME=${PACKAGE_TO_TEST} \
          -t ${EXTENSION_DOCKER_IMAGE} \
          -f ${DOCKER_FILE} \
          . ; \
        ./tools/smoke-test "${EXTENSION_DOCKER_IMAGE}" "${DOCKER_PLATFORM}";

    - name: Upload Artifact for Job
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.metadata.outputs.outfile }}
        path: artifacts/${{ steps.metadata.outputs.outfile }}
        retention-days: 1

    - name: Upload Artifacts to PackageCloud
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      env:
        PACKAGECLOUD_TOKEN: ${{ secrets.IO_PACKAGECLOUD_TOKEN }}
      run: |
        package_cloud push ${{ steps.metadata.outputs.repo }}/${{ matrix.os.pkg_cloud_distro || matrix.os.distro }}/${{ matrix.os.version }} artifacts/${{ steps.metadata.outputs.outfile }}; \

    outputs:
      tag: ${{ steps.metadata.outputs.tag }}
      version: ${{ steps.metadata.outputs.version }}
      ghopts: ${{ steps.metadata.outputs.ghopts }}

  notify-release:
    runs-on: ubuntu-latest
    needs: package
    if: always()
    steps:
      - name: Notify slack on build fail
        if: github.event.schedule && needs.docker.result != 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: C02V9U5TYE6 #team-o11y-data-platform
          status: FAILED
          color: danger

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
    - uses: actions/checkout@v3

    - name: Download Packages
      id: download
      uses: actions/download-artifact@v3
      with:
        path: packages

    - name: Stage Packages
      run: |
        mkdir artifacts && find ./packages -type f -regextype posix-extended -regex '.*.(deb|rpm)' -exec mv {} ./artifacts/ \;

    - name: List Release Contents
      if: ${{ !startsWith(github.ref, 'refs/tags') }}
      run: |
        ls -la artifacts/*

    - name: Generate Release Notes
      run: |
        tools/changelog '${{ needs.package.outputs.tag }}' > dist/RELEASE_NOTES.md
        cat dist/RELEASE_NOTES.md

    - name: Create Release
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create -R timescale/promscale_extension --target ${GITHUB_SHA} ${{ needs.package.outputs.ghopts }} --notes-file dist/RELEASE_NOTES.md ${{ needs.package.outputs.version }} artifacts/*
