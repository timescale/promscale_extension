name: docker
on:
  pull_request:
    paths-ignore:
  push:
    branches:
      - develop
      - master
    tags:
      - "*"

jobs:
  docker:
    runs-on: ubuntu-latest
    outputs:
      image_branch_name: ${{steps.metadata.outputs.image_branch_name}}
    strategy:
      matrix:
        pgversion:
        - 14
        - 13
        - 12
        tsversion:
        - 2.7.0
        base:
        - ha
        - alpine
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather metadata
        id: metadata
        run: |
          tsmajor=$(echo ${{ matrix.tsversion }} | cut -d. -f1)
          tsmajmin=$(echo ${{ matrix.tsversion }} | cut -d. -f1,2)
          image_branch_name=$(echo ${{github.head_ref || github.ref_name}} | sed 's#/#-#')
          build_type_suffix=$(echo "-${{matrix.base}}" | sed 's/-ha//')
          echo "::set-output name=tsmajor::${tsmajor}"
          echo "::set-output name=tsmajmin::${tsmajmin}"
          echo "::set-output name=image_branch_name::${image_branch_name}"
          echo "::set-output name=build_type_suffix::${build_type_suffix}"

      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          DOCKER_PUSH_REQUIRED: ${{ github.event.type != 'PullRequestEvent' || github.event.pull_request.head.repo.owner.login == 'timescale' }} # Don't run docker push when this is a PR from a fork
        with:
          # Temporary affixing PREVIOUS_IMAGE because 0.5.2 image was never tagged as 
          # timescaledev/promscale-extension:latest-ts2-pg<PGVER>
          # This needs to go as soon as we get 0.5.3 out.
          build-args: |
            PG_VERSION=${{ matrix.pgversion }}
            TIMESCALEDB_VERSION_FULL=${{ matrix.tsversion }}
            TIMESCALEDB_VERSION_MAJOR=${{ steps.metadata.outputs.tsmajor }}
            TIMESCALEDB_VERSION_MAJMIN=${{ steps.metadata.outputs.tsmajmin }}
            PREVIOUS_IMAGE=timescaledev/promscale-extension:0.5.2-ts${{ matrix.tsversion }}-pg${{ matrix.pgversion }}
          secrets: |
            "AWS_ACCESS_KEY_ID=${{ secrets.PROMSCALE_EXTENSION_SCCACHE_AWS_ACCESS_KEY_ID }}"
            "AWS_SECRET_ACCESS_KEY=${{ secrets.PROMSCALE_EXTENSION_SCCACHE_AWS_SECRET_ACCESS_KEY }}"
          context: .
          file: ${{matrix.base}}.Dockerfile
          push: ${{ env.DOCKER_PUSH_REQUIRED == 'true' }}
          load: ${{ env.DOCKER_PUSH_REQUIRED != 'true' }}
          tags: |
            ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}
            ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{steps.metadata.outputs.tsmajor}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}
            ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{steps.metadata.outputs.tsmajmin}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}
          labels: |
            org.opencontainers.image.source=
            org.opencontainers.image.revision=
            org.opencontainers.image.created=
          # Note: it's necessary to use a different cache scope to achieve caching for both Ubuntu and Alpine images
          cache-from: type=gha,scope=${{matrix.base}}-${{matrix.pgversion}}-${{matrix.tsversion}}
          cache-to: type=gha,mode=max,scope=${{matrix.base}}-${{matrix.pgversion}}-${{matrix.tsversion}}

      - name: Run end-to-end tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p e2e
        env:
          TS_DOCKER_IMAGE: ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}

      - name: Run SQL tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p sql-tests
        env:
          TS_DOCKER_IMAGE: ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}

      - name: Check SQL Documentation
        if: ${{ matrix.pgversion == 14 && matrix.base == 'ha' }}
        env:
          TS_DOCKER_IMAGE: ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}
          GENDOC_USE_DOCKER: true
        run: |
          make gendoc
          git diff --exit-code

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        # A dash indicates prerelease in SemVer
        if: ${{ startsWith(github.ref, 'refs/tags') && !contains(github.ref, '-') && matrix.base == 'alpine' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish alpine images to Docker Hub
        uses: akhilerm/tag-push-action@v2.0.0
        # A dash indicates prerelease in SemVer
        if: ${{ startsWith(github.ref, 'refs/tags') && !contains(github.ref, '-') && matrix.base == 'alpine' }}
        with:
          src: ghcr.io/timescale/dev_promscale_extension:${{steps.metadata.outputs.image_branch_name}}-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}${{steps.metadata.outputs.build_type_suffix}}
          dst: |
            timescaledev/promscale-extension:${{steps.metadata.outputs.image_branch_name}}-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}
            timescaledev/promscale-extension:latest-ts${{matrix.tsversion}}-pg${{matrix.pgversion}}

  call-connector-e2e:
    name: call connector e2e test
    needs:
      - docker
    if: needs.docker.result == 'success'
    uses: timescale/promscale/.github/workflows/go-e2e.yml@master
    with:
      # The intention here is to always run extention against connector's master
      # branch. This way we make sure extension doesn't accidentally break compatibility.
      docker_image_prefix:  ${{ needs.docker.outputs.image_branch_name }}-ts2
      ref: master

  # This allows us to set a single job which must pass in GitHub's branch protection rules,
  # otherwise we have to keep updating them as we add or remove postgres versions etc.
  docker-result:
    name: docker result
    if: always()
    needs:
      - docker
      - call-connector-e2e
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.docker.result == 'success' && needs.call-connector-e2e.result == 'success'
        run: exit 0
      - name: Mark the job as a failure
        if: needs.docker.result != 'success' || needs.call-connector-e2e.result != 'success'
        run: exit 1
